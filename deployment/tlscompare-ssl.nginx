server {
    ############################################################
    # Rewrite Rule for http
    ###########################################################
       listen         80;
       listen         [::]:80;
       server_name    .tlscompare.org;
       return         301 https://$server_name$request_uri;
}

server {
    ############################################################
    # SSL
    ###########################################################

    # See here http://nginx.org/en/docs/http/configuring_https_servers.html
    # And here https://raymii.org/s/tutorials/Strong_SSL_Security_On_nginx.html
    # Configuration from https://mozilla.github.io/server-side-tls/ssl-config-generator/

    listen 443 ssl;
    listen [::]:443 ssl;

    # certs sent to the client in SERVER HELLO are concatenated in ssl_certificate

    # Qualsys regt sich auf wenn intermediates nicht drinnen sind, von startssl runterladen und zusammencatten
    # $ cat www.example.com.crt bundle.crt > www.example.com.chained.crt

    # TODO Change paths
    ssl_certificate /etc/ssl/tlscompare/tlscompare.org.combined.pem;
    ssl_certificate_key /etc/ssl/tlscompare/tlscompare.org.key;
    ssl_session_timeout 5m;
    ssl_session_cache shared:SSL:50m;

    # Diffie-Hellman parameter for DHE ciphersuites, recommended 2048 bits
    # TODO Generate DH parameters stronger than default 1024
    # cd /etc/ssl/certs
    # openssl dhparam -out dhparam.pem 4096
    ssl_dhparam /etc/ssl/tlscompare/dhparam4096.pem;

    # modern configuration. tweak to your needs.
    ssl_protocols TLSv1.1 TLSv1.2;
    ssl_ciphers 'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!3DES:!MD5:!PSK';
    ssl_prefer_server_ciphers on;

    # HSTS (ngx_http_headers_module is required) (15768000 seconds = 6 months)
    # TODO add HSTS when we know its working
    # add_header Strict-Transport-Security max-age=15768000;

    # Add other headers
    add_header X-Frame-Options DENY;

    # OCSP Stapling ---
    # fetch OCSP records from URL in ssl_certificate and cache them
    ssl_stapling on;
    ssl_stapling_verify on;
    ## verify chain of trust of OCSP response using Root CA and Intermediate certs
    ssl_trusted_certificate /etc/ssl/tlscompare/ca.combined.pem;

    ############################################################
    # Application
    ############################################################

    location / { try_files $uri @tlscompare; }
    location @tlscompare {
        include uwsgi_params;
        uwsgi_pass unix:/opt/tlscompare/tlscompare.sock;
    }
}
